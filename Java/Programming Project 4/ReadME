Programming Project 4
Due March 29 at 11:59PM
PROGRAMMING (70 points)
Video Poker: Do PROGRAMMING PROJECT Project P7.10 in the 7th Edition of Big Java

You must follow the instructions below to receive credit for this assignment.

Instead of your player betting a single token each time, allow the player to bet between 1-5 tokens. If a player bets n tokens they win n times as much as indicated in the textbook prompt.

Your program must use the included templates. These templates are for the classes: Card, Deck, Game, Player, and a test class, PokerTest. You will need to fill-in the existing methods and may want to add more methods and/or instance variables to any or all of these classes except for the test class PokerTest. PokerTest must remain exactly as it is here.

This project requires you to have two versions of your game each constructed using a different version of a Game constructor. One will require an explicit parameter that you will get as a command-line argument, this is to help you (and us) test your code. That is, it will allow the user to specify the hand that the player gets which will help in testing if your game correctly identifies the various hands. Carefully read the comments in the template files to help you understand how this will work.

We will discuss design decisions and more for this project in lecture, so be sure to come to class!

Good luck!

What to hand in:

Templates for the five source files for this programming project are located in the Programming Project 4 workspace on Codio. In addition to the source files include a text file named readMe.txt with an explanation of how your program works. That is, write in plain English, instructions for using your software, explanations for how and why you chose to design your code the way you did. Also include any external sources and the names of anyone besides the teaching staff that you discussed the assignment with. Finally, the readMe.txt file is also an opportunity for you to get partial credit when certain requirements of the assignment are not met, so if something doesn’t work, identify it and discuss it here.

FAQ:

The suit order is clubs (1), diamonds (2), hearts (3), and spades (4).

When you implement the compareTo() method, you must first compare cards by their rank. Check the suit only if the rank is equal.

You should check that the user is betting between 1 and 5 tokens but you you can otherwise assume good user input.

Players should be able to play more than one game in a session and their winnings or losses should carry over.

It is important that you use the approach for encoding cards on the command-line that is described by the comments in the Game class. That is, s1 for ace of spades, s2 for two of spades etc…

Shuffle the deck after every hand.

The testPlay method only needs to evaluate the hand provided on the command-line. It does not need to play an actual game or allow the user to play again or anything like that.

Do not change the skeleton code. In particular you may be tempted to make checkHand private, but we need it public to work with the autograder.

Users must place a bet before each hand before they seeing their cards.

Straights do not wrap around so J Q K A 2 is invalid, but 10, J, Q, K, A is valid.
